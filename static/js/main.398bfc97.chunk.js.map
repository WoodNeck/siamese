{"version":3,"sources":["component/GuildLink.tsx","component/Sidebar.tsx","component/Login.tsx","component/Profile.tsx","component/Header.tsx","pages/Home.tsx","pages/GuildList.tsx","component/Loading.tsx","../../src/api/const/url.ts","pages/IconList.tsx","pages/Icon.tsx","pages/Command.tsx","pages/NotFound.tsx","pages/AuthNeeded.tsx","Main.tsx","reportWebVitals.js","index.js"],"names":["GuildLink","guild","to","id","className","src","iconURL","process","name","Sidebar","guilds","visible","location","useLocation","routes","useMemo","path","icon","active","pathname","startsWith","subcategories","map","containerClass","classes","push","join","route","activeClassName","isActive","xlinkHref","target","rel","href","Login","onClick","window","Profile","user","avatarURL","Header","sidebarVisible","setSidebarVisible","alt","Home","GuildList","hasPermission","data-tip","data-for","place","type","effect","Loading","ICONS","DIRECTORY","DIRECTORIES","IconList","useParams","guildID","groupID","useState","iconGroups","setIconGroups","icons","setIcons","iconGroup","setIconGroup","find","modal","withReactContent","Swal","useReducer","x","iconFetcher","forceUpdate","useEffect","Promise","all","fetch","URL","credentials","then","res","json","group","images","selected","groups","showIcon","useCallback","fire","imageUrl","url","heightAuto","useDropzone","accept","disabled","noClick","noKeyboard","maxSize","onDrop","files","length","html","formData","FormData","append","forEach","file","uploadingToast","toast","autoClose","method","body","a","status","Error","text","update","render","TYPE","SUCCESS","catch","err","message","toString","ERROR","getRootProps","getInputProps","open","isDragActive","isDragAccept","isDragReject","updateName","item","newName","el","isIcon","replace","value","endPoint","itemName","headers","JSON","stringify","success","error","createFolder","removeSelected","selectedGroups","filter","selectedIcons","removeGroups","directories","removeIcons","res1","res2","ok","removed","allChecked","every","color","bigger","shape","variant","checked","onChange","e","currentTarget","stopPropagation","tagName","preventDefault","animation","maxLength","onBlur","defaultValue","author","tag","iconCount","Date","createdTimestamp","toLocaleDateString","position","closeOnClick","Icon","setGuilds","match","useRouteMatch","Command","NotFound","AuthNeeded","Main","setUser","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.398bfc97.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Guild from \"../../../src/api/type/Guild\";\n\nimport \"./GuildLink.css\";\n\nconst GuildLink: React.FC<{\n  guild: Guild\n}> = ({ guild }) => {\n  return <Link to={`/icon/${guild.id}`} className=\"sidebar-subitem guild-link\">\n    <img className=\"guild-link-icon\" src={ guild.iconURL ? guild.iconURL : `${process.env.PUBLIC_URL}/icons/discord.svg#icon`}></img>\n    { guild.name  }\n  </Link>\n}\n\nexport default GuildLink;\n","import React, { useMemo } from \"react\";\nimport { NavLink, useLocation } from \"react-router-dom\";\n\nimport GuildLink from \"./GuildLink\";\nimport Guild from \"../../../src/api/type/Guild\";\n\nimport \"./Sidebar.css\";\n\ninterface Route {\n  path: string;\n  name: string;\n  icon: string;\n  active: boolean;\n  subcategories?: JSX.Element[];\n}\n\nconst Sidebar: React.FC<{\n  guilds: Guild[] | null;\n  visible: boolean;\n}> = ({ guilds, visible }) => {\n  const location = useLocation();\n\n  const routes: Route[] = useMemo(() => [\n    {\n      path: \"/\",\n      name: \"홈\",\n      icon: \"home\",\n      active: location.pathname === \"/\"\n    },\n    {\n      path: \"/icon\",\n      name: \"아이콘\",\n      icon: \"archive\",\n      active: location.pathname.startsWith(\"/icon\"),\n      subcategories: guilds?.map(guild => <GuildLink key={guild.id} guild={guild} />)\n    },\n    {\n      path: \"/command\",\n      name: \"명령어 목록\",\n      icon: \"bolt\",\n      active: location.pathname.startsWith(\"/command\")  ,\n    }\n  ], [guilds, location]);\n\n  const containerClass = useMemo(() => {\n    const classes = [\"sidebar-container\"];\n    if (visible) classes.push(\"visible\");\n\n    return classes.join(\" \");\n  }, [visible]);\n\n  return (\n    <div className={containerClass}>\n      <div className=\"sidebar-menu\">\n        {routes.map((route) => (\n          <div className=\"sidebar-menu-item-container\" key={route.name}>\n            <NavLink to={route.path} className=\"sidebar-menu-item\" activeClassName=\"selected\"\n              isActive={() => route.active}\n            >\n              <svg className=\"sidebar-menu-icon\">\n                <use xlinkHref={`${process.env.PUBLIC_URL}/icons/${route.icon}.svg#icon`} />\n              </svg>\n              <span>{route.name}</span>\n            </NavLink>\n            { route.active && route.subcategories }\n          </div>\n        ))}\n      </div>\n      <div className=\"sidebar-others\">\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://discord.com/oauth2/authorize?client_id=357073005819723777&permissions=3238976&scope=bot\">\n          <div className=\"sidebar-others-item\">\n            <svg className=\"sidebar-others-icon\">\n              <use xlinkHref={`${process.env.PUBLIC_URL}/icons/discord.svg#icon`} />\n            </svg>\n            <span>샴고양이 초대하기</span>\n          </div>\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import \"./Login.css\";\n\nconst Login = () => {\n  return (\n    <div className=\"header-menu\">\n      <div className=\"header-menu-item\" onClick={() => {\n        window.location.href = `${process.env.REACT_APP_API_URL}/auth/discord`;\n      }}>\n        <svg className=\"header-menu-icon\">\n          <use xlinkHref={`${process.env.PUBLIC_URL}/icons/login.svg#icon`} />\n        </svg>\n        <span>로그인</span>\n      </div>\n    </div>\n  )\n};\n\nexport default Login;\n","import React from \"react\";\nimport User from \"../../../src/api/type/User\";\nimport \"./Profile.css\";\n\nconst Profile: React.FC<{ user: User }> = ({ user }) => {\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-overlay\"\n        onClick={() => {\n          window.location.href = `${process.env.REACT_APP_API_URL}/logout`\n        }}\n      >로그아웃</div>\n      <img className=\"profile-avatar\" src={user.avatarURL} />\n    </div>\n  )\n}\n\nexport default Profile;\n","import React, { useMemo } from \"react\";\nimport {\n  Link\n} from \"react-router-dom\";\n\nimport \"./Header.css\";\nimport Login from \"./Login\";\nimport Profile from \"./Profile\";\nimport User from \"../../../src/api/type/User\";\n\nconst Header: React.FC<{\n  user: User | null;\n  sidebarVisible: boolean;\n  setSidebarVisible: React.Dispatch<React.SetStateAction<boolean>>;\n}> = ({ user, sidebarVisible, setSidebarVisible }) => {\n  const containerClass = useMemo(() => {\n    const classes = [\"header-container\"];\n    if (sidebarVisible) classes.push(\"sidebar\");\n\n    return classes.join(\" \");\n  }, [sidebarVisible]);\n\n  return (\n    <div className={containerClass}>\n      <div className=\"header-menu-left\">\n      <div className=\"header-burger\" onClick={() => setSidebarVisible(!sidebarVisible)}>\n        <svg className=\"header-burger-icon\">\n          <use xlinkHref={\n            sidebarVisible\n              ? `${process.env.PUBLIC_URL}/icons/cancel.svg#icon`\n              : `${process.env.PUBLIC_URL}/icons/hamburger.svg#icon`\n            } />\n        </svg>\n      </div>\n      <Link to=\"/\" className=\"header-logo\">\n        <div className=\"header-logo-text\">\n          <span>샴고양이</span>\n        </div>\n        <img className=\"header-logo-img\" alt=\"logo\" src={`${process.env.PUBLIC_URL}/logo20.png`} />\n      </Link>\n      </div>\n      <div className=\"header-menu-right\">\n        {user != null\n          ? user.id\n            ? <Profile user={user} />\n            : <Login />\n          : <></>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import \"./Home.css\";\n\nconst Home = () => {\n  return (\n    <div className=\"home-container\">\n      <h1 className=\"emoji-big\">🏗️</h1>\n      <h1>🚧공사중🚧</h1>\n    </div>\n  )\n}\n\nexport default Home;\n","import React from \"react\";\nimport {\n  Link\n} from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport Guild from \"../../../src/api/type/Guild\";\nimport \"./GuildList.css\";\n\nconst GuildList: React.FC<{\n  guilds: Guild[];\n}> = ({ guilds }) => {\n  return (\n    <div className=\"guild-container\">\n      <div className=\"guild-header\">\n        <div className=\"guild-header-text\">\n          <span>서버 목록</span>\n        </div>\n      </div>\n      <div className=\"guild-subtitle\">\n        아이콘을 편집할 서버를 선택해주세요\n      </div>\n      {\n        guilds.map(guild => (\n          <div key={guild.id}>\n            <div className=\"guild-separator\"></div>\n            <Link to={`/icon/${guild.id}`} className=\"guild-item\">\n              <img className=\"guild-icon\" src={ guild.iconURL ? guild.iconURL : `${process.env.PUBLIC_URL}/icons/discord.svg#icon`}></img>\n              <div className=\"guild-name\">{ guild.name }</div>\n              <svg className={`guild-approved-icon ${guild.hasPermission ? \"yes\" : \"no\"}`} data-tip data-for=\"guild-permission-tooltip\">\n                <use xlinkHref={`${process.env.PUBLIC_URL}/icons/${guild.hasPermission ? \"approve\" : \"cancel\"}.svg#icon`} />\n              </svg>\n              <ReactTooltip id=\"guild-permission-tooltip\" place=\"right\" type=\"dark\" effect=\"solid\">\n                <span>{ guild.hasPermission ? \"아이콘을 편집할 수 있는 서버입니다\" : \"아이콘 편집 권한이 없습니다\"}</span>\n              </ReactTooltip>\n              <div className=\"guild-enter-icon-container\">\n                <svg className=\"guild-enter-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/right-arrow.svg#icon`} />\n                </svg>\n              </div>\n            </Link>\n          </div>\n        ))\n      }\n      <div className=\"guild-footer\">\n        - 서버가 표시되지 않나요? 샴고양이를 사용하는 서버에서 아무 메시지나 보낸 다음 다시 확인해보세요!\n      </div>\n    </div>\n  );\n};\n\nexport default GuildList;\n","import \"./Loading.css\";\n\nconst Loading = () => {\n  return (\n    <div className=\"loading-container\">\n      <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n    </div>\n  )\n}\n\nexport default Loading;\n","export const LOGOUT = \"/logout\";\nexport const USER = \"/user\";\nexport const GUILDS = \"/guilds\";\nexport const ICON = \"/icon\";\nexport const ICONS = \"/icons\";\nexport const DIRECTORY = \"/directory\";\nexport const DIRECTORIES = \"/directories\";\n","import React, { useState, useEffect, useCallback, useMemo, useReducer } from \"react\";\nimport {\n  Link,\n  useParams\n} from \"react-router-dom\";\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { useDropzone } from \"react-dropzone\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { Checkbox } from \"pretty-checkbox-react\";\n\nimport Loading from \"../component/Loading\";\nimport * as URL from \"../../../src/api/const/url\";\nimport Guild from \"../../../src/api/type/Guild\";\nimport Icon from \"../../../src/api/type/Icon\";\nimport IconGroup from \"../../../src/api/type/IconGroup\";\nimport \"./IconList.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"@djthoms/pretty-checkbox\";\n\nconst IconList: React.FC<{\n  guilds: Guild[]\n}> = ({ guilds }) => {\n  const { guildID, groupID } = useParams<{ guildID: string, groupID?: string }>();\n  const [iconGroups, setIconGroups] = useState<Array<IconGroup & { selected: boolean }> | null>(null);\n  const [icons, setIcons] = useState<Array<Icon & { selected: boolean }> | null>(null);\n  const [iconGroup, setIconGroup] = useState<IconGroup | null>(null);\n\n  const guild = guilds.find(guild => guild.id === guildID)!;\n  const modal = withReactContent(Swal);\n\n  const [iconFetcher, forceUpdate] = useReducer(x => x + 1, 0);\n\n  useEffect(() => {\n    if (groupID) {\n      Promise.all([\n        fetch(`${process.env.REACT_APP_API_URL}${URL.DIRECTORY}?id=${groupID}`, {\n          credentials: \"include\"\n        }).then(res => res.json()),\n        fetch(`${process.env.REACT_APP_API_URL}${URL.ICONS}?guildID=${guildID}&groupID=${groupID}`, {\n          credentials: \"include\"\n        }).then(res => res.json())\n      ]).then(([group, images]) => {\n          setIconGroups([]);\n          setIcons(images.map((icon: Icon) => ({...icon, selected: false})));\n          setIconGroup(group as IconGroup);\n        });\n    } else {\n      Promise.all([\n        fetch(`${process.env.REACT_APP_API_URL}${URL.DIRECTORIES}?id=${guildID}`, {\n          credentials: \"include\"\n        }).then(res => res.json()),\n        fetch(`${process.env.REACT_APP_API_URL}${URL.ICONS}?guildID=${guildID}`, {\n          credentials: \"include\"\n        }).then(res => res.json())\n      ]).then(([groups, images]) => {\n        setIconGroups(groups.map((group: IconGroup) => ({...group, selected: false})));\n        setIcons(images.map((icon: Icon) => ({...icon, selected: false})));\n        setIconGroup(null);\n      });\n    }\n  }, [guildID, groupID, iconFetcher]);\n\n  const showIcon = useCallback((icon: Icon) => {\n    modal.fire({\n      imageUrl: icon.url,\n      heightAuto: false\n    });\n  }, [modal]);\n\n  const {\n    getRootProps,\n    getInputProps,\n    open,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({\n    accept: \"image/jpg, image/jpeg, image/png, image/gif, image/webp\",\n    disabled: !guild.hasPermission,\n    noClick: true,\n    noKeyboard: true,\n    maxSize: 8388608, // 8MB\n    onDrop: files => {\n      if (files.length <= 0) {\n        modal.fire({\n          icon: \"error\",\n          html: \"이미지 크기가 너무 크거나(8MB 이상)<br/>지원하지 않는 파일 포맷이 섞여있어요!\",\n          heightAuto: false\n        });\n        return;\n      }\n\n      const formData = new FormData();\n\n      formData.append(\"guildID\", guildID);\n      if (groupID) {\n        formData.append(\"groupID\", groupID);\n      }\n\n      files.forEach(file => {\n        formData.append(\"icons[]\", file, file.name);\n      });\n\n      const uploadingToast = toast(`${files.length}개의 아이콘을 업로드중입니다...`, { autoClose: false });\n\n      fetch(`${process.env.REACT_APP_API_URL}${URL.ICONS}`, {\n        method: \"POST\",\n        credentials: \"include\",\n        body: formData\n      }).then(async res => {\n        if (res.status !== 200) {\n          throw new Error(await res.text());\n        }\n        // Re-render component\n        toast.update(uploadingToast, {\n          render: `${files.length}개의 아이콘을 추가했습니다!`,\n          type: toast.TYPE.SUCCESS,\n          autoClose: 5000\n        });\n        forceUpdate();\n      }).catch(err => {\n        toast.update(uploadingToast, {\n          render: () => <div>❌ 아이콘 업로드에 실패했습니다 :(<br/>{err.message ? err.message : err.toString()}</div>,\n          type: toast.TYPE.ERROR,\n          autoClose: 5000\n        });\n      });\n    }\n  });\n\n  const containerClass = useMemo(() => {\n    const classes = [\"icon-container\"];\n\n    isDragActive && classes.push(\"drag-active\");\n    isDragAccept && classes.push(\"drag-accept\");\n    isDragReject && classes.push(\"drag-reject\");\n\n    return classes.join(\" \");\n  }, [\n    isDragActive,\n    isDragReject,\n    isDragAccept\n  ]);\n\n  const updateName = useCallback((item: Icon | IconGroup, newName: string, el: HTMLInputElement, isIcon: boolean) => {\n    newName = newName.replace(/\\s+/, \"\");\n\n    el.value = newName;\n    const endPoint = isIcon ? URL.ICON : URL.DIRECTORY;\n    const itemName = isIcon ? \"아이콘 이름\" : \"그룹명\";\n\n    fetch(`${process.env.REACT_APP_API_URL}${endPoint}`, {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        \"Content-type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify({\n        id: item.id,\n        name: newName\n      })\n    }).then(async res => {\n      if (res.status !== 200) {\n        throw new Error(await res.text());\n      }\n      // Re-render component\n      toast.success(`${itemName}을 업데이트했습니다!`);\n      forceUpdate();\n    }).catch(err => {\n      el.value = item.name;\n      toast.error(() => <div>❌ {itemName}을 변경하지 못했습니다<br/>{err.message ? err.message : err.toString()}</div>);\n    });\n  }, []);\n\n  const createFolder = useCallback(() => {\n    const formData = new FormData();\n    formData.append(\"guildID\", guildID);\n\n    fetch(`${process.env.REACT_APP_API_URL}${URL.DIRECTORY}`, {\n      method: \"POST\",\n      credentials: \"include\",\n      body: formData\n    }).then(async res => {\n      if (res.status !== 200) {\n        throw new Error(await res.text());\n      }\n      // Re-render component\n      toast(\"📁 폴더를 추가했습니다!\");\n      forceUpdate();\n    }).catch(err => {\n      toast.error(() => <div>❌ 새 폴더 생성에 실패했습니다 :(<br/>{err.message ? err.message : err.toString()}</div>);\n    });\n  }, [guildID]);\n\n  const removeSelected = useCallback(() => {\n    if (!iconGroups || !icons) return;\n\n    const selectedGroups: IconGroup[] = iconGroups.filter(group => group.selected);\n    const selectedIcons: Icon[] = icons.filter(icon => icon.selected);\n\n    if (selectedGroups.length <= 0 && selectedIcons.length <= 0) return;\n\n    const removeGroups = fetch(`${process.env.REACT_APP_API_URL}${URL.DIRECTORIES}`, {\n      method: \"DELETE\",\n      credentials: \"include\",\n      headers: {\n        \"Content-type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify({\n        directories: selectedGroups.map(iconGroup => iconGroup.id),\n        guildID,\n      })\n    });\n\n    const removeIcons = fetch(`${process.env.REACT_APP_API_URL}${URL.ICONS}`, {\n      method: \"DELETE\",\n      credentials: \"include\",\n      headers: {\n        \"Content-type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify({\n        icons: selectedIcons.map(iconGroup => iconGroup.id),\n        guildID,\n      })\n    });\n\n    Promise.all([removeGroups, removeIcons]).then(([res1, res2]) => {\n      if (!res1.ok || !res2.ok) throw new Error();\n\n      const removed: string[] = [];\n      if (selectedGroups.length > 0) removed.push(`${selectedGroups.length}개의 그룹`);\n      if (selectedIcons.length > 0) removed.push(`${selectedIcons.length}개의 아이콘`);\n\n      toast.success(`${removed.join(\" 및 \")}을 삭제했습니다!`)\n      forceUpdate();\n    }).catch(() => {\n      toast(\"❌ 아이콘/폴더 삭제에 실패했습니다.\")\n    });\n  }, [guildID, iconGroups, icons]);\n\n  const allChecked = useMemo(() => {\n    if (!iconGroups || !icons) return false;\n    if (iconGroups.length <= 0 && icons.length <= 0) return false;\n\n    return icons.every(icon => icon.selected) && iconGroups.every(group => group.selected);\n  }, [icons, iconGroups])\n\n  if (!iconGroups || !icons) return <Loading />\n\n  return (\n    <div {...getRootProps({className: containerClass})}>\n      <div className=\"icon-menu-container\">\n        <div className=\"icon-menu-left\">\n          <Link to={groupID ? `/icon/${guildID}` : \"/icon\"} className=\"icon-menu-item icon-back-button-container\">\n            <svg className=\"icon-arrow-icon\">\n              <use xlinkHref={`${process.env.PUBLIC_URL}/icons/left-arrow.svg#icon`} />\n            </svg>\n          </Link>\n          <img className=\"icon-guild-icon\" src={ guild.iconURL ? guild.iconURL : `${process.env.PUBLIC_URL}/icons/discord.svg#icon`}></img>\n          <div className=\"icon-guild-title\">\n            <span>{ guild.name }</span>\n            {\n              iconGroup &&\n              <div className=\"icon-group-title\">\n                <span className=\"icon-group-separator\"> / </span>\n                <svg className=\"icon-group-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/folder.svg#icon`} />\n                </svg>\n                <span>{ iconGroup.name }</span>\n              </div>\n            }\n          </div>\n        </div>\n        {\n          guild.hasPermission &&\n          <div className=\"icon-menu-right\">\n            {\n              !iconGroup &&\n              <div className=\"icon-menu-item icon-add-folder-btn\" onClick={createFolder}>\n                <svg className=\"icon-menu-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/add-folder.svg#icon`} />\n                </svg>\n              </div>\n            }\n            <div className=\"icon-menu-item icon-remove-btn\" onClick={removeSelected}>\n              <svg className=\"icon-menu-icon\">\n                <use xlinkHref={`${process.env.PUBLIC_URL}/icons/trash.svg#icon`} />\n              </svg>\n            </div>\n            <div className=\"icon-menu-item\" onClick={open}>\n              <svg className=\"icon-upload-icon\">\n                <use xlinkHref={`${process.env.PUBLIC_URL}/icons/upload.svg#icon`} />\n              </svg>\n              <span className=\"icon-upload-text\">업로드</span>\n            </div>\n          </div>\n        }\n      </div>\n      <div className=\"icon-item-container\">\n        <div className=\"icon-item icon-item-header\">\n          { guild.hasPermission &&\n            <div className=\"icon-item-checkbox-container\">\n              <Checkbox color=\"danger\" bigger shape=\"curve\" variant=\"thick\" className=\"icon-item-checkbox\"\n                icon={<svg className=\"icon-checkbox-icon\"><use xlinkHref={`${process.env.PUBLIC_URL}/icons/cancel.svg#icon`} /></svg>}\n                checked={allChecked}\n                onChange={e => {\n                  const checked = e.currentTarget.checked;\n\n                  setIcons([...icons.map(icon => ({ ...icon, selected: checked }))]);\n                  setIconGroups([...iconGroups.map(group => ({ ...group, selected: checked }))]);\n                }}></Checkbox>\n            </div>\n          }\n          <div className=\"icon-item-name-container header-name\">이름</div>\n          <div className=\"icon-item-author\">생성자</div>\n          <div className=\"icon-item-count\">아이콘 개수</div>\n          <div className=\"icon-item-date\">생성일자</div>\n        </div>\n        {\n          iconGroups.map(iconGroup => (\n            <Link to={`/icon/${guildID}/${iconGroup.id}`} key={iconGroup.id} className=\"icon-item\">\n              { guild.hasPermission &&\n                <div className=\"icon-item-checkbox-container\" onClick={e => {\n                  e.stopPropagation();\n\n                  if ((e.target as HTMLElement).tagName !== \"INPUT\") {\n                    e.preventDefault();\n                  }\n                }}>\n                  <Checkbox color=\"danger\" animation=\"jelly\" bigger shape=\"curve\" variant=\"thick\" className=\"icon-item-checkbox\"\n                    icon={<svg className=\"icon-checkbox-icon\"><use xlinkHref={`${process.env.PUBLIC_URL}/icons/cancel.svg#icon`} /></svg>}\n                    checked={iconGroup.selected}\n                    onChange={() => {\n                      iconGroup.selected = !iconGroup.selected;\n                      setIconGroups([...iconGroups]);\n                    }}\n                  ></Checkbox>\n                </div>\n              }\n              <div className=\"icon-item-name-container\">\n                <svg className=\"icon-item-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/folder.svg#icon`} />\n                </svg>\n                <input type=\"text\" maxLength={10}\n                  onBlur={e => {\n                    const newName = e.target.value;\n                    if (newName !== iconGroup.name) {\n                      updateName(iconGroup, newName, e.target, false);\n                    }\n                  }}\n                  onClick={e => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                  }}\n                  className=\"icon-item-name\" defaultValue={iconGroup.name} disabled={ !guild.hasPermission } />\n              </div>\n              <div className=\"icon-item-author\">\n                <img className=\"icon-item-author-icon\" src={ iconGroup.author?.avatarURL ?? \"\" }></img>\n                <span className=\"icon-item-author-tag\">{ iconGroup.author?.tag ?? \"\" }</span>\n              </div>\n              <div className=\"icon-item-count\">{ iconGroup.iconCount }</div>\n              <div className=\"icon-item-date\">{ new Date(iconGroup.createdTimestamp).toLocaleDateString() }</div>\n            </Link>\n          ))\n        }\n        {\n          icons.map(icon => (\n            <div key={icon.id} className=\"icon-item\" onClick={() => showIcon(icon)}>\n              { guild.hasPermission &&\n                <div className=\"icon-item-checkbox-container\" onClick={e => e.stopPropagation()}>\n                  <Checkbox color=\"danger\" animation=\"jelly\" bigger shape=\"curve\" variant=\"thick\" className=\"icon-item-checkbox\"\n                    icon={<svg className=\"icon-checkbox-icon\"><use xlinkHref={`${process.env.PUBLIC_URL}/icons/cancel.svg#icon`} /></svg>}\n                    checked={icon.selected}\n                    onChange={() => {\n                      icon.selected = !icon.selected;\n                      setIcons([...icons]);\n                    }}></Checkbox>\n                </div>\n              }\n              <div className=\"icon-item-name-container\">\n                <svg className=\"icon-item-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/image.svg#icon`} />\n                </svg>\n                <input type=\"text\" maxLength={10}\n                  onBlur={e => {\n                    const newName = e.target.value;\n                    if (newName !== icon.name) {\n                      updateName(icon, newName, e.target, true);\n                    }\n                  }}\n                  onClick={e => e.stopPropagation()}\n                  className=\"icon-item-name\" defaultValue={icon.name} disabled={ !guild.hasPermission } />\n              </div>\n              <div className=\"icon-item-author\">\n                <img className=\"icon-item-author-icon\" src={ icon.author?.avatarURL ?? \"\" }></img>\n                <span className=\"icon-item-author-tag\">{ icon.author?.tag ?? \"\" }</span>\n              </div>\n              <div className=\"icon-item-count\"></div>\n              <div className=\"icon-item-date\">{ new Date(icon.createdTimestamp).toLocaleDateString() }</div>\n            </div>\n          ))\n        }\n      </div>\n      <div className=\"icon-drag-visualizer\">\n        <svg className=\"icon-drag-add\">\n          <use xlinkHref={`${process.env.PUBLIC_URL}/icons/add.svg#icon`} />\n        </svg>\n        <div className=\"icon-drag-reject-container\">\n          <svg className=\"icon-drag-reject\">\n            <use xlinkHref={`${process.env.PUBLIC_URL}/icons/cancel.svg#icon`} />\n          </svg>\n          <div>지원하지 않는 파일 포맷이 섞여있어요!</div>\n        </div>\n      </div>\n      <input {...getInputProps()} />\n      <ToastContainer position=\"bottom-right\" closeOnClick />\n    </div>\n  );\n}\n\nexport default IconList;\n","import React, { useEffect } from \"react\";\nimport {\n  Switch,\n  Route,\n  useRouteMatch\n} from \"react-router-dom\";\n\nimport GuildList from \"./GuildList\";\nimport IconList from \"./IconList\";\nimport \"./Icon.css\";\nimport Loading from \"../component/Loading\";\nimport Guild from \"../../../src/api/type/Guild\";\n\nconst Icon: React.FC<{\n  guilds: Guild[] | null;\n  setGuilds: React.Dispatch<React.SetStateAction<Guild[] | null>>;\n}> = ({ guilds, setGuilds }) => {\n  const match = useRouteMatch();\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_URL}/guilds`, {\n      credentials: \"include\"\n    }).then(res => res.json())\n      .then(guilds => {\n        setGuilds(guilds as Guild[]);\n      })\n  }, [setGuilds]);\n\n  if (!guilds) return <Loading />\n\n  return (<Switch>\n    <Route path={[\n      `${match.path}/:guildID/:groupID`,\n      `${match.path}/:guildID`\n    ]}>\n      <IconList guilds={guilds} />\n    </Route>\n    <Route path={match.path}>\n      <GuildList guilds={guilds} />\n    </Route>\n  </Switch>)\n}\n\nexport default Icon;\n","import \"./Command.css\";\n\nconst Command = () => {\n  return (\n    <div className=\"command-container\">\n      <h1 className=\"emoji-big\">🏗️</h1>\n      <h1>🚧공사중🚧</h1>\n    </div>\n  )\n}\n\nexport default Command;\n","import \"./NotFound.css\";\n\nconst NotFound = () => (\n  <div className=\"not-found-container\">\n    <svg className=\"not-found-icon\">\n      <use xlinkHref={`${process.env.PUBLIC_URL}/icons/warn.svg#icon`} />\n    </svg>\n    <span>404 Not Found</span>\n  </div>\n);\n\nexport default NotFound;\n","import \"./AuthNeeded.css\";\n\nconst AuthNeeded = () => {\n  return (\n    <div className=\"auth-container\">\n      <div className=\"auth-header\">로그인이 필요합니다</div>\n      <div className=\"auth-login-button\" onClick={() => {\n        window.location.href = `${process.env.REACT_APP_API_URL}/auth/discord`;\n      }}>\n        <svg className=\"auth-discord-icon\">\n          <use xlinkHref={`${process.env.PUBLIC_URL}/icons/discord.svg#icon`} />\n        </svg>\n        <div className=\"auth-login-separator\"></div>\n        <span>디스코드로 로그인하기</span>\n      </div>\n    </div>\n  )\n}\n\nexport default AuthNeeded;\n","import { useState, useEffect } from \"react\";\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport \"./Main.css\";\nimport Sidebar from \"./component/Sidebar\";\nimport Header from \"./component/Header\";\nimport Home from \"./pages/Home\";\nimport Icon from \"./pages/Icon\";\nimport Command from \"./pages/Command\";\nimport NotFound from \"./pages/NotFound\";\nimport AuthNeeded from \"./pages/AuthNeeded\";\nimport User from \"../../src/api/type/User\";\nimport Guild from \"../../src/api/type/Guild\";\n\nconst Main = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [guilds, setGuilds] = useState<Guild[] | null>(null);\n  const [sidebarVisible, setSidebarVisible] = useState<boolean>(false);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_URL}/user`, {\n      credentials: \"include\"\n    }).then(user => user.json())\n      .then(user => {\n        setUser(user as User);\n      })\n  }, []);\n\n  return (\n    <HashRouter>\n      <div className=\"main-container\">\n        <Header user={user} sidebarVisible={sidebarVisible} setSidebarVisible={setSidebarVisible} />\n        <div className=\"contents-container\">\n          <Sidebar guilds={guilds} visible={sidebarVisible} />\n          <div className=\"page-container\">\n            <Switch>\n              <Route path=\"/icon\">\n                {\n                  user\n                    ? user.id\n                      ? <Icon guilds={guilds} setGuilds={setGuilds} />\n                      : <AuthNeeded />\n                    : <></>\n                }\n              </Route>\n              <Route path=\"/command\" component={Command} />\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"*\" component={NotFound} />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}