{"version":3,"sources":["component/Sidebar.tsx","component/Login.tsx","component/Profile.tsx","component/Header.tsx","pages/Home.tsx","pages/GuildList.tsx","component/Loading.tsx","../../src/api/const/url.ts","pages/IconList.tsx","pages/Icon.tsx","pages/Command.tsx","pages/NotFound.tsx","pages/AuthNeeded.tsx","Main.tsx","reportWebVitals.js","index.js"],"names":["routes","path","name","icon","Sidebar","className","map","route","to","activeClassName","isActive","match","location","pathname","includes","xlinkHref","process","target","rel","href","Login","onClick","window","Profile","user","src","avatarURL","Header","alt","id","Home","GuildList","guilds","guild","iconURL","hasPermission","Loading","ICONS","IconList","useParams","guildID","groupID","useState","iconGroups","setIconGroups","icons","setIcons","iconGroup","setIconGroup","find","modal","withReactContent","Swal","useEffect","Promise","all","fetch","credentials","then","res","json","URL","group","images","groups","showIcon","useCallback","fire","imageUrl","url","heightAuto","type","e","stopPropagation","author","tag","iconCount","Date","createdTimestamp","toLocaleDateString","Icon","useRouteMatch","setGuilds","Command","NotFound","AuthNeeded","Main","setUser","basename","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b87fed2c.chunk.js","sourcesContent":["import {\n  NavLink\n} from \"react-router-dom\";\n\nimport \"./Sidebar.css\";\n\ninterface Route {\n  path: string;\n  name: string;\n  icon: string;\n}\n\nconst routes: Route[] = [\n  {\n    path: \"/\",\n    name: \"홈\",\n    icon: \"home\"\n  },\n  {\n    path: \"/icon\",\n    name: \"아이콘\",\n    icon: \"archive\"\n  },\n  {\n    path: \"/command\",\n    name: \"명령어 목록\",\n    icon: \"bolt\"\n  }\n];\n\nconst Sidebar = () => {\n  return (\n    <div className=\"sidebar-container\">\n      <div className=\"sidebar-menu\">\n        {routes.map((route) => (\n          <NavLink to={route.path} className=\"sidebar-menu-item\" activeClassName=\"selected\"\n            key={route.name}\n            isActive={(match, location) => {\n              if (!match) return false;\n              if (route.path === \"/\") return location.pathname === route.path;\n\n              return location.pathname.includes(route.path);\n            }}\n          >\n            <svg className=\"sidebar-menu-icon\">\n              <use xlinkHref={`${process.env.PUBLIC_URL}/icons/${route.icon}.svg#icon`} />\n            </svg>\n            <span>{route.name}</span>\n          </NavLink>\n        ))}\n      </div>\n      <div className=\"sidebar-others\">\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://discord.com/oauth2/authorize?client_id=357073005819723777&permissions=3238976&scope=bot\">\n          <div className=\"sidebar-others-item\">\n            <svg className=\"sidebar-others-icon\">\n              <use xlinkHref={`${process.env.PUBLIC_URL}/icons/discord.svg#icon`} />\n            </svg>\n            <span>샴고양이 초대하기</span>\n          </div>\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import \"./Login.css\";\n\nconst Login = () => {\n  return (\n    <div className=\"header-menu\">\n      <div className=\"header-menu-item\" onClick={() => {\n        window.location.href = `${process.env.REACT_APP_API_URL}/auth/discord`;\n      }}>\n        <svg className=\"header-menu-icon\">\n          <use xlinkHref={`${process.env.PUBLIC_URL}/icons/login.svg#icon`} />\n        </svg>\n        <span>로그인</span>\n      </div>\n    </div>\n  )\n};\n\nexport default Login;\n","import React from \"react\";\nimport User from \"../../../src/api/type/User\";\nimport \"./Profile.css\";\n\nconst Profile: React.FC<{ user: User }> = ({ user }) => {\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-overlay\"\n        onClick={() => {\n          window.location.href = `${process.env.REACT_APP_API_URL}/logout`\n        }}\n      >로그아웃</div>\n      <img className=\"profile-avatar\" src={user.avatarURL} />\n    </div>\n  )\n}\n\nexport default Profile;\n","import React from \"react\";\nimport {\n  Link\n} from \"react-router-dom\";\n\nimport \"./Header.css\";\nimport Login from \"./Login\";\nimport Profile from \"./Profile\";\nimport User from \"../../../src/api/type/User\";\n\nconst Header: React.FC<{\n  user: User | null;\n}> = ({ user }) => {\n  return (\n    <div className=\"header-container\">\n      <Link to=\"/\">\n        <div className=\"header-logo\">\n          <div className=\"header-logo-text\">\n            <span>샴고양이</span>\n          </div>\n          <img className=\"header-logo-img\" alt=\"logo\" src={`${process.env.PUBLIC_URL}/logo20.png`} />\n        </div>\n      </Link>\n      {user != null\n        ? user.id\n          ? <Profile user={user} />\n          : <Login />\n        : <></>\n      }\n    </div>\n  );\n}\n\nexport default Header;\n","import \"./Home.css\";\n\nconst Home = () => {\n  return (\n    <div className=\"home-container\">\n      <h1 className=\"emoji-big\">🏗️</h1>\n      <h1>🚧공사중🚧</h1>\n    </div>\n  )\n}\n\nexport default Home;\n","import React from \"react\";\nimport {\n  Link\n} from \"react-router-dom\";\n\nimport Guild from \"../../../src/api/type/Guild\";\nimport \"./GuildList.css\";\n\nconst GuildList: React.FC<{\n  guilds: Guild[];\n}> = ({ guilds }) => {\n  return (\n    <div className=\"guild-container\">\n      <div className=\"guild-header\">\n        <div className=\"guild-header-text\">\n          <span>서버 목록</span>\n        </div>\n      </div>\n      <div className=\"guild-subtitle\">\n        아이콘을 편집할 서버를 선택해주세요\n      </div>\n      {\n        guilds.map(guild => (\n          <div key={guild.id}>\n            <div className=\"guild-separator\"></div>\n            <Link to={`/icon/${guild.id}`} className=\"guild-item\">\n              <img className=\"guild-icon\" src={ guild.iconURL ? guild.iconURL : `${process.env.PUBLIC_URL}/icons/discord.svg#icon`}></img>\n              <div className=\"guild-name\">{ guild.name }</div>\n              <svg className={`guild-approved-icon ${guild.hasPermission ? \"yes\" : \"no\"}`}>\n                <use xlinkHref={`${process.env.PUBLIC_URL}/icons/${guild.hasPermission ? \"approve\" : \"cancel\"}.svg#icon`} />\n              </svg>\n              <div className=\"guild-enter-icon-container\">\n                <svg className=\"guild-enter-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/right-arrow.svg#icon`} />\n                </svg>\n              </div>\n            </Link>\n          </div>\n        ))\n      }\n      <div className=\"guild-footer\">\n        - 서버가 표시되지 않나요? 샴고양이를 사용하는 서버에서 아무 메시지나 보낸 다음 다시 확인해보세요!\n      </div>\n    </div>\n  );\n};\n\nexport default GuildList;\n","import \"./Loading.css\";\n\nconst Loading = () => {\n  return (\n    <div className=\"loading-container\">\n      <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n    </div>\n  )\n}\n\nexport default Loading;\n","export const LOGOUT = \"/logout\";\nexport const USER = \"/user\";\nexport const GUILDS = \"/guilds\";\nexport const ICON = \"/icon\";\nexport const ICONS = \"/icons\";\nexport const DIRECTORY = \"/directory\";\nexport const DIRECTORIES = \"/directories\";\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  Link,\n  useParams\n} from \"react-router-dom\";\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\n\nimport Loading from \"../component/Loading\";\nimport * as URL from \"../../../src/api/const/url\";\nimport Guild from \"../../../src/api/type/Guild\";\nimport Icon from \"../../../src/api/type/Icon\";\nimport IconGroup from \"../../../src/api/type/IconGroup\";\nimport \"./IconList.css\";\n\nconst IconList: React.FC<{\n  guilds: Guild[]\n}> = ({ guilds }) => {\n  const { guildID, groupID } = useParams<{ guildID: string, groupID?: string }>();\n  const [iconGroups, setIconGroups] = useState<IconGroup[] | null>(null);\n  const [icons, setIcons] = useState<Icon[] | null>(null);\n  const [iconGroup, setIconGroup] = useState<IconGroup | null>(null);\n\n  const guild = guilds.find(guild => guild.id === guildID)!;\n  const modal = withReactContent(Swal);\n\n  useEffect(() => {\n    if (groupID) {\n      Promise.all([\n        fetch(`${process.env.REACT_APP_API_URL}${URL.DIRECTORY}?id=${groupID}`, {\n          credentials: \"include\"\n        }).then(res => res.json()),\n        fetch(`${process.env.REACT_APP_API_URL}${URL.ICONS}?guildID=${guildID}&groupID=${groupID}`, {\n          credentials: \"include\"\n        }).then(res => res.json())\n      ]).then(([group, images]) => {\n          setIconGroups([]);\n          setIcons(images as Icon[]);\n          setIconGroup(group as IconGroup);\n        });\n    } else {\n      Promise.all([\n        fetch(`${process.env.REACT_APP_API_URL}${URL.DIRECTORIES}?id=${guildID}`, {\n          credentials: \"include\"\n        }).then(res => res.json()),\n        fetch(`${process.env.REACT_APP_API_URL}${URL.ICONS}?guildID=${guildID}`, {\n          credentials: \"include\"\n        }).then(res => res.json())\n      ]).then(([groups, images]) => {\n        setIconGroups(groups as IconGroup[]);\n        setIcons(images as Icon[]);\n        setIconGroup(null);\n      });\n    }\n  }, [guildID, groupID]);\n\n  const showIcon = useCallback((icon: Icon) => {\n    modal.fire({\n      imageUrl: icon.url,\n      heightAuto: false\n    });\n  }, [modal]);\n\n  if (!iconGroups || !icons) return <Loading />\n\n  return (\n    <>\n      <div className=\"icon-menu-container\">\n        <div className=\"icon-menu-left\">\n          <Link to={groupID ? `/icon/${guildID}` : \"/icon\"} className=\"icon-menu-item icon-back-button-container\">\n            <svg className=\"icon-menu-icon\">\n              <use xlinkHref={`${process.env.PUBLIC_URL}/icons/left-arrow.svg#icon`} />\n            </svg>\n          </Link>\n          <img className=\"icon-guild-icon\" src={ guild.iconURL ? guild.iconURL : `${process.env.PUBLIC_URL}/icons/discord.svg#icon`}></img>\n          <div className=\"icon-guild-title\">\n            <span>{ guild.name }</span>\n            {\n              iconGroup &&\n              <div className=\"icon-group-title\">\n                <span className=\"icon-group-separator\"> / </span>\n                <svg className=\"icon-group-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/folder.svg#icon`} />\n                </svg>\n                <span>{ iconGroup.name }</span>\n              </div>\n            }\n          </div>\n        </div>\n        <div className=\"icon-menu-right\">\n          <div className=\"icon-menu-item icon-remove-btn\">\n            <svg className=\"icon-remove-icon\">\n              <use xlinkHref={`${process.env.PUBLIC_URL}/icons/trash.svg#icon`} />\n            </svg>\n          </div>\n          <div className=\"icon-menu-item\">\n            <svg className=\"icon-upload-icon\">\n              <use xlinkHref={`${process.env.PUBLIC_URL}/icons/upload.svg#icon`} />\n            </svg>\n            <span className=\"icon-upload-text\">업로드</span>\n          </div>\n        </div>\n      </div>\n      <div className=\"icon-item-container\">\n        <div className=\"icon-item icon-item-header\">\n          <input type=\"checkbox\" className=\"icon-item-checkbox\" onClick={e => e.stopPropagation()}></input>\n          <div className=\"icon-item-name header-name\">이름</div>\n          <div className=\"icon-item-author\">생성자</div>\n          <div className=\"icon-item-count\">아이콘 개수</div>\n          <div className=\"icon-item-date\">생성일자</div>\n        </div>\n        <div className=\"icon-item-separator\"></div>\n        {\n          iconGroups.map(iconGroup => (\n            <Link to={`/icon/${guildID}/${iconGroup.id}`} key={iconGroup.id} className=\"icon-item\">\n              <input type=\"checkbox\" className=\"icon-item-checkbox\" onClick={e => e.stopPropagation()}></input>\n              <div className=\"icon-item-name\">\n                <svg className=\"icon-item-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/folder.svg#icon`} />\n                </svg>\n                <span>{ iconGroup.name }</span>\n              </div>\n              <div className=\"icon-item-author\">\n                <img className=\"icon-item-author-icon\" src={ iconGroup.author?.avatarURL ?? \"\" }></img>\n                <span className=\"icon-item-author-tag\">{ iconGroup.author?.tag ?? \"\" }</span>\n              </div>\n              <div className=\"icon-item-count\">{ iconGroup.iconCount }</div>\n              <div className=\"icon-item-date\">{ new Date(iconGroup.createdTimestamp).toLocaleDateString() }</div>\n            </Link>\n          ))\n        }\n        {\n          icons.map(icon => (\n            <div key={icon.id} className=\"icon-item\" onClick={() => showIcon(icon)}>\n              <input type=\"checkbox\" className=\"icon-item-checkbox\" onClick={e => e.stopPropagation()}></input>\n              <div className=\"icon-item-name\">\n                <svg className=\"icon-item-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/image.svg#icon`} />\n                </svg>\n                <span>{ icon.name }</span>\n              </div>\n              <div className=\"icon-item-author\">\n                <img className=\"icon-item-author-icon\" src={ icon.author?.avatarURL ?? \"\" }></img>\n                <span className=\"icon-item-author-tag\">{ icon.author?.tag ?? \"\" }</span>\n              </div>\n              <div className=\"icon-item-count\"></div>\n              <div className=\"icon-item-date\">{ new Date(icon.createdTimestamp).toLocaleDateString() }</div>\n            </div>\n          ))\n        }\n      </div>\n    </>\n  );\n}\n\nexport default IconList;\n","import { useState, useEffect } from \"react\";\nimport {\n  Switch,\n  Route,\n  useRouteMatch\n} from \"react-router-dom\";\n\nimport GuildList from \"./GuildList\";\nimport IconList from \"./IconList\";\nimport \"./Icon.css\";\nimport Loading from \"../component/Loading\";\nimport Guild from \"../../../src/api/type/Guild\";\n\nconst Icon = () => {\n  const match = useRouteMatch();\n  const [guilds, setGuilds] = useState<Guild[] | null>(null);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_URL}/guilds`, {\n      credentials: \"include\"\n    }).then(res => res.json())\n      .then(guilds => {\n        setGuilds(guilds as Guild[]);\n      })\n  }, []);\n\n  if (!guilds) return <Loading />\n\n  return (<Switch>\n    <Route path={[\n      `${match.path}/:guildID/:groupID`,\n      `${match.path}/:guildID`\n    ]}>\n      <IconList guilds={guilds} />\n    </Route>\n    <Route path={match.path}>\n      <GuildList guilds={guilds} />\n    </Route>\n  </Switch>)\n}\n\nexport default Icon;\n","import \"./Command.css\";\n\nconst Command = () => {\n  return (\n    <div className=\"command-container\">\n      <h1 className=\"emoji-big\">🏗️</h1>\n      <h1>🚧공사중🚧</h1>\n    </div>\n  )\n}\n\nexport default Command;\n","import \"./NotFound.css\";\n\nconst NotFound = () => (\n  <div className=\"not-found-container\">\n    <svg className=\"not-found-icon\">\n      <use xlinkHref={`${process.env.PUBLIC_URL}/icons/warn.svg#icon`} />\n    </svg>\n    <span>404 Not Found</span>\n  </div>\n);\n\nexport default NotFound;\n","import \"./AuthNeeded.css\";\n\nconst AuthNeeded = () => {\n  return (\n    <div className=\"auth-container\">\n      <div className=\"auth-header\">먼저 로그인이 필요합니다</div>\n      <div className=\"auth-login-button\" onClick={() => {\n        window.location.href = `${process.env.REACT_APP_API_URL}/auth/discord`;\n      }}>\n        <svg className=\"auth-discord-icon\">\n          <use xlinkHref={`${process.env.PUBLIC_URL}/icons/discord.svg#icon`} />\n        </svg>\n        <div className=\"auth-login-separator\"></div>\n        <span>디스코드로 로그인하기</span>\n      </div>\n    </div>\n  )\n}\n\nexport default AuthNeeded;\n","import { useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport \"./Main.css\";\nimport Sidebar from \"./component/Sidebar\";\nimport Header from \"./component/Header\";\nimport Home from \"./pages/Home\";\nimport Icon from \"./pages/Icon\";\nimport Command from \"./pages/Command\";\nimport NotFound from \"./pages/NotFound\";\nimport AuthNeeded from \"./pages/AuthNeeded\";\nimport User from \"../../src/api/type/User\";\n\nconst Main = () => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_URL}/user`, {\n      credentials: \"include\"\n    }).then(user => user.json())\n      .then(user => {\n        setUser(user as User);\n      })\n  }, []);\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"main-container\">\n        <Header user={user} />\n        <div className=\"contents-container\">\n          <Sidebar />\n          <div className=\"page-container\">\n            <Switch>\n              <Route path=\"/icon\">\n                {\n                  user\n                    ? user.id\n                      ? <Icon />\n                      : <AuthNeeded />\n                    : <></>\n                }\n              </Route>\n              <Route path=\"/command\" component={Command} />\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"*\" component={NotFound} />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}