{"version":3,"sources":["component/Sidebar.tsx","component/Login.tsx","component/Profile.tsx","component/Header.tsx","pages/Home.tsx","pages/GuildList.tsx","component/Loading.tsx","../../src/api/const/url.ts","pages/IconList.tsx","pages/Icon.tsx","pages/Command.tsx","pages/NotFound.tsx","pages/AuthNeeded.tsx","Main.tsx","reportWebVitals.js","index.js"],"names":["routes","path","name","icon","Sidebar","className","map","route","to","activeClassName","isActive","match","location","pathname","includes","xlinkHref","process","target","rel","href","Login","onClick","window","Profile","user","src","avatarURL","Header","alt","id","Home","GuildList","guilds","guild","iconURL","hasPermission","data-tip","data-for","place","type","effect","Loading","ICONS","DIRECTORY","DIRECTORIES","IconList","useParams","guildID","groupID","useState","iconGroups","setIconGroups","icons","setIcons","iconGroup","setIconGroup","find","modal","withReactContent","Swal","useReducer","x","iconFetcher","forceUpdate","useEffect","Promise","all","fetch","URL","credentials","then","res","json","group","images","selected","groups","showIcon","useCallback","fire","imageUrl","url","heightAuto","useDropzone","accept","disabled","noClick","noKeyboard","maxSize","onDrop","files","length","html","formData","FormData","append","forEach","file","uploadingToast","toast","autoClose","method","body","a","status","Error","text","update","render","TYPE","SUCCESS","catch","err","message","toString","ERROR","getRootProps","getInputProps","open","isDragActive","isDragAccept","isDragReject","containerClass","useMemo","classes","push","join","updateName","item","newName","el","isIcon","replace","value","endPoint","itemName","headers","JSON","stringify","success","error","createFolder","removeSelected","selectedGroups","filter","selectedIcons","removeGroups","directories","removeIcons","res1","res2","ok","removed","allChecked","every","color","bigger","shape","variant","checked","onChange","e","currentTarget","stopPropagation","tagName","preventDefault","animation","maxLength","onBlur","defaultValue","author","tag","iconCount","Date","createdTimestamp","toLocaleDateString","position","closeOnClick","Icon","useRouteMatch","setGuilds","Command","NotFound","AuthNeeded","Main","setUser","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca5ddec8.chunk.js","sourcesContent":["import {\n  NavLink\n} from \"react-router-dom\";\n\nimport \"./Sidebar.css\";\n\ninterface Route {\n  path: string;\n  name: string;\n  icon: string;\n}\n\nconst routes: Route[] = [\n  {\n    path: \"/\",\n    name: \"홈\",\n    icon: \"home\"\n  },\n  {\n    path: \"/icon\",\n    name: \"아이콘\",\n    icon: \"archive\"\n  },\n  {\n    path: \"/command\",\n    name: \"명령어 목록\",\n    icon: \"bolt\"\n  }\n];\n\nconst Sidebar = () => {\n  return (\n    <div className=\"sidebar-container\">\n      <div className=\"sidebar-menu\">\n        {routes.map((route) => (\n          <NavLink to={route.path} className=\"sidebar-menu-item\" activeClassName=\"selected\"\n            key={route.name}\n            isActive={(match, location) => {\n              if (!match) return false;\n              if (route.path === \"/\") return location.pathname === route.path;\n\n              return location.pathname.includes(route.path);\n            }}\n          >\n            <svg className=\"sidebar-menu-icon\">\n              <use xlinkHref={`${process.env.PUBLIC_URL}/icons/${route.icon}.svg#icon`} />\n            </svg>\n            <span>{route.name}</span>\n          </NavLink>\n        ))}\n      </div>\n      <div className=\"sidebar-others\">\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"https://discord.com/oauth2/authorize?client_id=357073005819723777&permissions=3238976&scope=bot\">\n          <div className=\"sidebar-others-item\">\n            <svg className=\"sidebar-others-icon\">\n              <use xlinkHref={`${process.env.PUBLIC_URL}/icons/discord.svg#icon`} />\n            </svg>\n            <span>샴고양이 초대하기</span>\n          </div>\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","import \"./Login.css\";\n\nconst Login = () => {\n  return (\n    <div className=\"header-menu\">\n      <div className=\"header-menu-item\" onClick={() => {\n        window.location.href = `${process.env.REACT_APP_API_URL}/auth/discord`;\n      }}>\n        <svg className=\"header-menu-icon\">\n          <use xlinkHref={`${process.env.PUBLIC_URL}/icons/login.svg#icon`} />\n        </svg>\n        <span>로그인</span>\n      </div>\n    </div>\n  )\n};\n\nexport default Login;\n","import React from \"react\";\nimport User from \"../../../src/api/type/User\";\nimport \"./Profile.css\";\n\nconst Profile: React.FC<{ user: User }> = ({ user }) => {\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-overlay\"\n        onClick={() => {\n          window.location.href = `${process.env.REACT_APP_API_URL}/logout`\n        }}\n      >로그아웃</div>\n      <img className=\"profile-avatar\" src={user.avatarURL} />\n    </div>\n  )\n}\n\nexport default Profile;\n","import React from \"react\";\nimport {\n  Link\n} from \"react-router-dom\";\n\nimport \"./Header.css\";\nimport Login from \"./Login\";\nimport Profile from \"./Profile\";\nimport User from \"../../../src/api/type/User\";\n\nconst Header: React.FC<{\n  user: User | null;\n}> = ({ user }) => {\n  return (\n    <div className=\"header-container\">\n      <Link to=\"/\">\n        <div className=\"header-logo\">\n          <div className=\"header-logo-text\">\n            <span>샴고양이</span>\n          </div>\n          <img className=\"header-logo-img\" alt=\"logo\" src={`${process.env.PUBLIC_URL}/logo20.png`} />\n        </div>\n      </Link>\n      {user != null\n        ? user.id\n          ? <Profile user={user} />\n          : <Login />\n        : <></>\n      }\n    </div>\n  );\n}\n\nexport default Header;\n","import \"./Home.css\";\n\nconst Home = () => {\n  return (\n    <div className=\"home-container\">\n      <h1 className=\"emoji-big\">🏗️</h1>\n      <h1>🚧공사중🚧</h1>\n    </div>\n  )\n}\n\nexport default Home;\n","import React from \"react\";\nimport {\n  Link\n} from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport Guild from \"../../../src/api/type/Guild\";\nimport \"./GuildList.css\";\n\nconst GuildList: React.FC<{\n  guilds: Guild[];\n}> = ({ guilds }) => {\n  return (\n    <div className=\"guild-container\">\n      <div className=\"guild-header\">\n        <div className=\"guild-header-text\">\n          <span>서버 목록</span>\n        </div>\n      </div>\n      <div className=\"guild-subtitle\">\n        아이콘을 편집할 서버를 선택해주세요\n      </div>\n      {\n        guilds.map(guild => (\n          <div key={guild.id}>\n            <div className=\"guild-separator\"></div>\n            <Link to={`/icon/${guild.id}`} className=\"guild-item\">\n              <img className=\"guild-icon\" src={ guild.iconURL ? guild.iconURL : `${process.env.PUBLIC_URL}/icons/discord.svg#icon`}></img>\n              <div className=\"guild-name\">{ guild.name }</div>\n              <svg className={`guild-approved-icon ${guild.hasPermission ? \"yes\" : \"no\"}`} data-tip data-for=\"guild-permission-tooltip\">\n                <use xlinkHref={`${process.env.PUBLIC_URL}/icons/${guild.hasPermission ? \"approve\" : \"cancel\"}.svg#icon`} />\n              </svg>\n              <ReactTooltip id=\"guild-permission-tooltip\" place=\"right\" type=\"dark\" effect=\"solid\">\n                <span>{ guild.hasPermission ? \"아이콘을 편집할 수 있는 서버입니다\" : \"아이콘 편집 권한이 없습니다\"}</span>\n              </ReactTooltip>\n              <div className=\"guild-enter-icon-container\">\n                <svg className=\"guild-enter-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/right-arrow.svg#icon`} />\n                </svg>\n              </div>\n            </Link>\n          </div>\n        ))\n      }\n      <div className=\"guild-footer\">\n        - 서버가 표시되지 않나요? 샴고양이를 사용하는 서버에서 아무 메시지나 보낸 다음 다시 확인해보세요!\n      </div>\n    </div>\n  );\n};\n\nexport default GuildList;\n","import \"./Loading.css\";\n\nconst Loading = () => {\n  return (\n    <div className=\"loading-container\">\n      <div className=\"lds-spinner\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n    </div>\n  )\n}\n\nexport default Loading;\n","export const LOGOUT = \"/logout\";\nexport const USER = \"/user\";\nexport const GUILDS = \"/guilds\";\nexport const ICON = \"/icon\";\nexport const ICONS = \"/icons\";\nexport const DIRECTORY = \"/directory\";\nexport const DIRECTORIES = \"/directories\";\n","import React, { useState, useEffect, useCallback, useMemo, useReducer } from \"react\";\nimport {\n  Link,\n  useParams\n} from \"react-router-dom\";\nimport Swal from \"sweetalert2\"\nimport withReactContent from \"sweetalert2-react-content\"\nimport { useDropzone } from \"react-dropzone\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport { Checkbox } from \"pretty-checkbox-react\";\n\nimport Loading from \"../component/Loading\";\nimport * as URL from \"../../../src/api/const/url\";\nimport Guild from \"../../../src/api/type/Guild\";\nimport Icon from \"../../../src/api/type/Icon\";\nimport IconGroup from \"../../../src/api/type/IconGroup\";\nimport \"./IconList.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"@djthoms/pretty-checkbox\";\n\nconst IconList: React.FC<{\n  guilds: Guild[]\n}> = ({ guilds }) => {\n  const { guildID, groupID } = useParams<{ guildID: string, groupID?: string }>();\n  const [iconGroups, setIconGroups] = useState<Array<IconGroup & { selected: boolean }> | null>(null);\n  const [icons, setIcons] = useState<Array<Icon & { selected: boolean }> | null>(null);\n  const [iconGroup, setIconGroup] = useState<IconGroup | null>(null);\n\n  const guild = guilds.find(guild => guild.id === guildID)!;\n  const modal = withReactContent(Swal);\n\n  const [iconFetcher, forceUpdate] = useReducer(x => x + 1, 0);\n\n  useEffect(() => {\n    if (groupID) {\n      Promise.all([\n        fetch(`${process.env.REACT_APP_API_URL}${URL.DIRECTORY}?id=${groupID}`, {\n          credentials: \"include\"\n        }).then(res => res.json()),\n        fetch(`${process.env.REACT_APP_API_URL}${URL.ICONS}?guildID=${guildID}&groupID=${groupID}`, {\n          credentials: \"include\"\n        }).then(res => res.json())\n      ]).then(([group, images]) => {\n          setIconGroups([]);\n          setIcons(images.map((icon: Icon) => ({...icon, selected: false})));\n          setIconGroup(group as IconGroup);\n        });\n    } else {\n      Promise.all([\n        fetch(`${process.env.REACT_APP_API_URL}${URL.DIRECTORIES}?id=${guildID}`, {\n          credentials: \"include\"\n        }).then(res => res.json()),\n        fetch(`${process.env.REACT_APP_API_URL}${URL.ICONS}?guildID=${guildID}`, {\n          credentials: \"include\"\n        }).then(res => res.json())\n      ]).then(([groups, images]) => {\n        setIconGroups(groups.map((group: IconGroup) => ({...group, selected: false})));\n        setIcons(images.map((icon: Icon) => ({...icon, selected: false})));\n        setIconGroup(null);\n      });\n    }\n  }, [guildID, groupID, iconFetcher]);\n\n  const showIcon = useCallback((icon: Icon) => {\n    modal.fire({\n      imageUrl: icon.url,\n      heightAuto: false\n    });\n  }, [modal]);\n\n  const {\n    getRootProps,\n    getInputProps,\n    open,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({\n    accept: \"image/jpg, image/jpeg, image/png, image/gif, image/webp\",\n    disabled: !guild.hasPermission,\n    noClick: true,\n    noKeyboard: true,\n    maxSize: 8388608, // 8MB\n    onDrop: files => {\n      if (files.length <= 0) {\n        modal.fire({\n          icon: \"error\",\n          html: \"이미지 크기가 너무 크거나(8MB 이상)<br/>지원하지 않는 파일 포맷이 섞여있어요!\",\n          heightAuto: false\n        });\n        return;\n      }\n\n      const formData = new FormData();\n\n      formData.append(\"guildID\", guildID);\n      if (groupID) {\n        formData.append(\"groupID\", groupID);\n      }\n\n      files.forEach(file => {\n        formData.append(\"icons[]\", file, file.name);\n      });\n\n      const uploadingToast = toast(`${files.length}개의 아이콘을 업로드중입니다...`, { autoClose: false });\n\n      fetch(`${process.env.REACT_APP_API_URL}${URL.ICONS}`, {\n        method: \"POST\",\n        credentials: \"include\",\n        body: formData\n      }).then(async res => {\n        if (res.status !== 200) {\n          throw new Error(await res.text());\n        }\n        // Re-render component\n        toast.update(uploadingToast, {\n          render: `${files.length}개의 아이콘을 추가했습니다!`,\n          type: toast.TYPE.SUCCESS,\n          autoClose: 5000\n        });\n        forceUpdate();\n      }).catch(err => {\n        toast.update(uploadingToast, {\n          render: () => <div>❌ 아이콘 업로드에 실패했습니다 :(<br/>{err.message ? err.message : err.toString()}</div>,\n          type: toast.TYPE.ERROR,\n          autoClose: 5000\n        });\n      });\n    }\n  });\n\n  const containerClass = useMemo(() => {\n    const classes = [\"icon-container\"];\n\n    isDragActive && classes.push(\"drag-active\");\n    isDragAccept && classes.push(\"drag-accept\");\n    isDragReject && classes.push(\"drag-reject\");\n\n    return classes.join(\" \");\n  }, [\n    isDragActive,\n    isDragReject,\n    isDragAccept\n  ]);\n\n  const updateName = useCallback((item: Icon | IconGroup, newName: string, el: HTMLInputElement, isIcon: boolean) => {\n    newName = newName.replace(/\\s+/, \"\");\n\n    el.value = newName;\n    const endPoint = isIcon ? URL.ICON : URL.DIRECTORY;\n    const itemName = isIcon ? \"아이콘 이름\" : \"그룹명\";\n\n    fetch(`${process.env.REACT_APP_API_URL}${endPoint}`, {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        \"Content-type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify({\n        id: item.id,\n        name: newName\n      })\n    }).then(async res => {\n      if (res.status !== 200) {\n        throw new Error(await res.text());\n      }\n      // Re-render component\n      toast.success(`${itemName}을 업데이트했습니다!`);\n      forceUpdate();\n    }).catch(err => {\n      el.value = item.name;\n      toast.error(() => <div>❌ {itemName}을 변경하지 못했습니다<br/>{err.message ? err.message : err.toString()}</div>);\n    });\n  }, []);\n\n  const createFolder = useCallback(() => {\n    const formData = new FormData();\n    formData.append(\"guildID\", guildID);\n\n    fetch(`${process.env.REACT_APP_API_URL}${URL.DIRECTORY}`, {\n      method: \"POST\",\n      credentials: \"include\",\n      body: formData\n    }).then(async res => {\n      if (res.status !== 200) {\n        throw new Error(await res.text());\n      }\n      // Re-render component\n      toast(\"📁 폴더를 추가했습니다!\");\n      forceUpdate();\n    }).catch(err => {\n      toast.error(() => <div>❌ 새 폴더 생성에 실패했습니다 :(<br/>{err.message ? err.message : err.toString()}</div>);\n    });\n  }, [guildID]);\n\n  const removeSelected = useCallback(() => {\n    if (!iconGroups || !icons) return;\n\n    const selectedGroups: IconGroup[] = iconGroups.filter(group => group.selected);\n    const selectedIcons: Icon[] = icons.filter(icon => icon.selected);\n\n    if (selectedGroups.length <= 0 && selectedIcons.length <= 0) return;\n\n    const removeGroups = fetch(`${process.env.REACT_APP_API_URL}${URL.DIRECTORIES}`, {\n      method: \"DELETE\",\n      credentials: \"include\",\n      headers: {\n        \"Content-type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify({\n        directories: selectedGroups.map(iconGroup => iconGroup.id),\n        guildID,\n      })\n    });\n\n    const removeIcons = fetch(`${process.env.REACT_APP_API_URL}${URL.ICONS}`, {\n      method: \"DELETE\",\n      credentials: \"include\",\n      headers: {\n        \"Content-type\": \"application/json; charset=utf-8\"\n      },\n      body: JSON.stringify({\n        icons: selectedIcons.map(iconGroup => iconGroup.id),\n        guildID,\n      })\n    });\n\n    Promise.all([removeGroups, removeIcons]).then(([res1, res2]) => {\n      if (!res1.ok || !res2.ok) throw new Error();\n\n      const removed: string[] = [];\n      if (selectedGroups.length > 0) removed.push(`${selectedGroups.length}개의 그룹`);\n      if (selectedIcons.length > 0) removed.push(`${selectedIcons.length}개의 아이콘`);\n\n      toast.success(`${removed.join(\" 및 \")}을 삭제했습니다!`)\n      forceUpdate();\n    }).catch(() => {\n      toast(\"❌ 아이콘/폴더 삭제에 실패했습니다.\")\n    });\n  }, [guildID, iconGroups, icons]);\n\n  const allChecked = useMemo(() => {\n    if (!iconGroups || !icons) return false;\n    if (iconGroups.length <= 0 && icons.length <= 0) return false;\n\n    return icons.every(icon => icon.selected) && iconGroups.every(group => group.selected);\n  }, [icons, iconGroups])\n\n  if (!iconGroups || !icons) return <Loading />\n\n  return (\n    <div {...getRootProps({className: containerClass})}>\n      <div className=\"icon-menu-container\">\n        <div className=\"icon-menu-left\">\n          <Link to={groupID ? `/icon/${guildID}` : \"/icon\"} className=\"icon-menu-item icon-back-button-container\">\n            <svg className=\"icon-arrow-icon\">\n              <use xlinkHref={`${process.env.PUBLIC_URL}/icons/left-arrow.svg#icon`} />\n            </svg>\n          </Link>\n          <img className=\"icon-guild-icon\" src={ guild.iconURL ? guild.iconURL : `${process.env.PUBLIC_URL}/icons/discord.svg#icon`}></img>\n          <div className=\"icon-guild-title\">\n            <span>{ guild.name }</span>\n            {\n              iconGroup &&\n              <div className=\"icon-group-title\">\n                <span className=\"icon-group-separator\"> / </span>\n                <svg className=\"icon-group-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/folder.svg#icon`} />\n                </svg>\n                <span>{ iconGroup.name }</span>\n              </div>\n            }\n          </div>\n        </div>\n        {\n          guild.hasPermission &&\n          <div className=\"icon-menu-right\">\n            {\n              !iconGroup &&\n              <div className=\"icon-menu-item icon-add-folder-btn\" onClick={createFolder}>\n                <svg className=\"icon-menu-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/add-folder.svg#icon`} />\n                </svg>\n              </div>\n            }\n            <div className=\"icon-menu-item icon-remove-btn\" onClick={removeSelected}>\n              <svg className=\"icon-menu-icon\">\n                <use xlinkHref={`${process.env.PUBLIC_URL}/icons/trash.svg#icon`} />\n              </svg>\n            </div>\n            <div className=\"icon-menu-item\" onClick={open}>\n              <svg className=\"icon-upload-icon\">\n                <use xlinkHref={`${process.env.PUBLIC_URL}/icons/upload.svg#icon`} />\n              </svg>\n              <span className=\"icon-upload-text\">업로드</span>\n            </div>\n          </div>\n        }\n      </div>\n      <div className=\"icon-item-container\">\n        <div className=\"icon-item icon-item-header\">\n          { guild.hasPermission &&\n            <div className=\"icon-item-checkbox-container\">\n              <Checkbox color=\"danger\" bigger shape=\"curve\" variant=\"thick\" className=\"icon-item-checkbox\"\n                icon={<svg className=\"icon-checkbox-icon\"><use xlinkHref={`${process.env.PUBLIC_URL}/icons/cancel.svg#icon`} /></svg>}\n                checked={allChecked}\n                onChange={e => {\n                  const checked = e.currentTarget.checked;\n\n                  setIcons([...icons.map(icon => ({ ...icon, selected: checked }))]);\n                  setIconGroups([...iconGroups.map(group => ({ ...group, selected: checked }))]);\n                }}></Checkbox>\n            </div>\n          }\n          <div className=\"icon-item-name-container header-name\">이름</div>\n          <div className=\"icon-item-author\">생성자</div>\n          <div className=\"icon-item-count\">아이콘 개수</div>\n          <div className=\"icon-item-date\">생성일자</div>\n        </div>\n        {\n          iconGroups.map(iconGroup => (\n            <Link to={`/icon/${guildID}/${iconGroup.id}`} key={iconGroup.id} className=\"icon-item\">\n              { guild.hasPermission &&\n                <div className=\"icon-item-checkbox-container\" onClick={e => {\n                  e.stopPropagation();\n\n                  if ((e.target as HTMLElement).tagName !== \"INPUT\") {\n                    e.preventDefault();\n                  }\n                }}>\n                  <Checkbox color=\"danger\" animation=\"jelly\" bigger shape=\"curve\" variant=\"thick\" className=\"icon-item-checkbox\"\n                    icon={<svg className=\"icon-checkbox-icon\"><use xlinkHref={`${process.env.PUBLIC_URL}/icons/cancel.svg#icon`} /></svg>}\n                    checked={iconGroup.selected}\n                    onChange={() => {\n                      iconGroup.selected = !iconGroup.selected;\n                      setIconGroups([...iconGroups]);\n                    }}\n                  ></Checkbox>\n                </div>\n              }\n              <div className=\"icon-item-name-container\">\n                <svg className=\"icon-item-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/folder.svg#icon`} />\n                </svg>\n                <input type=\"text\" maxLength={10}\n                  onBlur={e => {\n                    const newName = e.target.value;\n                    if (newName !== iconGroup.name) {\n                      updateName(iconGroup, newName, e.target, false);\n                    }\n                  }}\n                  onClick={e => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                  }}\n                  className=\"icon-item-name\" defaultValue={iconGroup.name} disabled={ !guild.hasPermission } />\n              </div>\n              <div className=\"icon-item-author\">\n                <img className=\"icon-item-author-icon\" src={ iconGroup.author?.avatarURL ?? \"\" }></img>\n                <span className=\"icon-item-author-tag\">{ iconGroup.author?.tag ?? \"\" }</span>\n              </div>\n              <div className=\"icon-item-count\">{ iconGroup.iconCount }</div>\n              <div className=\"icon-item-date\">{ new Date(iconGroup.createdTimestamp).toLocaleDateString() }</div>\n            </Link>\n          ))\n        }\n        {\n          icons.map(icon => (\n            <div key={icon.id} className=\"icon-item\" onClick={() => showIcon(icon)}>\n              { guild.hasPermission &&\n                <div className=\"icon-item-checkbox-container\" onClick={e => e.stopPropagation()}>\n                  <Checkbox color=\"danger\" animation=\"jelly\" bigger shape=\"curve\" variant=\"thick\" className=\"icon-item-checkbox\"\n                    icon={<svg className=\"icon-checkbox-icon\"><use xlinkHref={`${process.env.PUBLIC_URL}/icons/cancel.svg#icon`} /></svg>}\n                    checked={icon.selected}\n                    onChange={() => {\n                      icon.selected = !icon.selected;\n                      setIcons([...icons]);\n                    }}></Checkbox>\n                </div>\n              }\n              <div className=\"icon-item-name-container\">\n                <svg className=\"icon-item-icon\">\n                  <use xlinkHref={`${process.env.PUBLIC_URL}/icons/image.svg#icon`} />\n                </svg>\n                <input type=\"text\" maxLength={10}\n                  onBlur={e => {\n                    const newName = e.target.value;\n                    if (newName !== icon.name) {\n                      updateName(icon, newName, e.target, true);\n                    }\n                  }}\n                  onClick={e => e.stopPropagation()}\n                  className=\"icon-item-name\" defaultValue={icon.name} disabled={ !guild.hasPermission } />\n              </div>\n              <div className=\"icon-item-author\">\n                <img className=\"icon-item-author-icon\" src={ icon.author?.avatarURL ?? \"\" }></img>\n                <span className=\"icon-item-author-tag\">{ icon.author?.tag ?? \"\" }</span>\n              </div>\n              <div className=\"icon-item-count\"></div>\n              <div className=\"icon-item-date\">{ new Date(icon.createdTimestamp).toLocaleDateString() }</div>\n            </div>\n          ))\n        }\n      </div>\n      <div className=\"icon-drag-visualizer\">\n        <svg className=\"icon-drag-add\">\n          <use xlinkHref={`${process.env.PUBLIC_URL}/icons/add.svg#icon`} />\n        </svg>\n        <div className=\"icon-drag-reject-container\">\n          <svg className=\"icon-drag-reject\">\n            <use xlinkHref={`${process.env.PUBLIC_URL}/icons/cancel.svg#icon`} />\n          </svg>\n          <div>지원하지 않는 파일 포맷이 섞여있어요!</div>\n        </div>\n      </div>\n      <input {...getInputProps()} />\n      <ToastContainer position=\"bottom-right\" closeOnClick />\n    </div>\n  );\n}\n\nexport default IconList;\n","import { useState, useEffect } from \"react\";\nimport {\n  Switch,\n  Route,\n  useRouteMatch\n} from \"react-router-dom\";\n\nimport GuildList from \"./GuildList\";\nimport IconList from \"./IconList\";\nimport \"./Icon.css\";\nimport Loading from \"../component/Loading\";\nimport Guild from \"../../../src/api/type/Guild\";\n\nconst Icon = () => {\n  const match = useRouteMatch();\n  const [guilds, setGuilds] = useState<Guild[] | null>(null);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_URL}/guilds`, {\n      credentials: \"include\"\n    }).then(res => res.json())\n      .then(guilds => {\n        setGuilds(guilds as Guild[]);\n      })\n  }, []);\n\n  if (!guilds) return <Loading />\n\n  return (<Switch>\n    <Route path={[\n      `${match.path}/:guildID/:groupID`,\n      `${match.path}/:guildID`\n    ]}>\n      <IconList guilds={guilds} />\n    </Route>\n    <Route path={match.path}>\n      <GuildList guilds={guilds} />\n    </Route>\n  </Switch>)\n}\n\nexport default Icon;\n","import \"./Command.css\";\n\nconst Command = () => {\n  return (\n    <div className=\"command-container\">\n      <h1 className=\"emoji-big\">🏗️</h1>\n      <h1>🚧공사중🚧</h1>\n    </div>\n  )\n}\n\nexport default Command;\n","import \"./NotFound.css\";\n\nconst NotFound = () => (\n  <div className=\"not-found-container\">\n    <svg className=\"not-found-icon\">\n      <use xlinkHref={`${process.env.PUBLIC_URL}/icons/warn.svg#icon`} />\n    </svg>\n    <span>404 Not Found</span>\n  </div>\n);\n\nexport default NotFound;\n","import \"./AuthNeeded.css\";\n\nconst AuthNeeded = () => {\n  return (\n    <div className=\"auth-container\">\n      <div className=\"auth-header\">로그인이 필요합니다</div>\n      <div className=\"auth-login-button\" onClick={() => {\n        window.location.href = `${process.env.REACT_APP_API_URL}/auth/discord`;\n      }}>\n        <svg className=\"auth-discord-icon\">\n          <use xlinkHref={`${process.env.PUBLIC_URL}/icons/discord.svg#icon`} />\n        </svg>\n        <div className=\"auth-login-separator\"></div>\n        <span>디스코드로 로그인하기</span>\n      </div>\n    </div>\n  )\n}\n\nexport default AuthNeeded;\n","import { useState, useEffect } from \"react\";\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport \"./Main.css\";\nimport Sidebar from \"./component/Sidebar\";\nimport Header from \"./component/Header\";\nimport Home from \"./pages/Home\";\nimport Icon from \"./pages/Icon\";\nimport Command from \"./pages/Command\";\nimport NotFound from \"./pages/NotFound\";\nimport AuthNeeded from \"./pages/AuthNeeded\";\nimport User from \"../../src/api/type/User\";\n\nconst Main = () => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    fetch(`${process.env.REACT_APP_API_URL}/user`, {\n      credentials: \"include\"\n    }).then(user => user.json())\n      .then(user => {\n        setUser(user as User);\n      })\n  }, []);\n\n  return (\n    <HashRouter>\n      <div className=\"main-container\">\n        <Header user={user} />\n        <div className=\"contents-container\">\n          <Sidebar />\n          <div className=\"page-container\">\n            <Switch>\n              <Route path=\"/icon\">\n                {\n                  user\n                    ? user.id\n                      ? <Icon />\n                      : <AuthNeeded />\n                    : <></>\n                }\n              </Route>\n              <Route path=\"/command\" component={Command} />\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"*\" component={NotFound} />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default Main;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Main from \"./Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}